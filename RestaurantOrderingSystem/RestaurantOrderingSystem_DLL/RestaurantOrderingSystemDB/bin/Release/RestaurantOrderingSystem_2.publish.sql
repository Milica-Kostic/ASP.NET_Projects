/*
Deployment script for RestaurantOrderingSystem

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "RestaurantOrderingSystem"
:setvar DefaultFilePrefix "RestaurantOrderingSystem"
:setvar DefaultDataPath "C:\Users\Milica\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Milica\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [CategoryName] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Food]...';


GO
CREATE TABLE [dbo].[Food] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [FoodName]     NVARCHAR (50)  NOT NULL,
    [Description]  NVARCHAR (250) NULL,
    [Price]        MONEY          NOT NULL,
    [RestaurantId] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Order]...';


GO
CREATE TABLE [dbo].[Order] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [OrderName] NVARCHAR (50) NOT NULL,
    [OrderDate] DATETIME2 (7) NOT NULL,
    [FoodId]    INT           NOT NULL,
    [Quantity]  INT           NOT NULL,
    [Total]     MONEY         NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Restaurant]...';


GO
CREATE TABLE [dbo].[Restaurant] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [RestName]        NVARCHAR (50) NOT NULL,
    [City]            NVARCHAR (50) NOT NULL,
    [CategoryId]      INT           NOT NULL,
    [RestDescription] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[spCategory_All]...';


GO
CREATE PROCEDURE [dbo].[spCategory_All]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [Id], [CategoryName]
	FROM dbo.[Category];
END
GO
PRINT N'Creating [dbo].[spFood_All]...';


GO
CREATE PROCEDURE [dbo].[spFood_All]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [Id], [FoodName], [Description], [Price], [RestaurantId]
	FROM dbo.[Food];
END
GO
PRINT N'Creating [dbo].[spFood_Delete]...';


GO
CREATE PROCEDURE [dbo].[spFood_Delete]
	@Id int
AS
BEGIN
	SET NOCOUNT ON;

	DELETE
	FROM dbo.[Food]
	WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spFood_GetById]...';


GO
CREATE PROCEDURE [dbo].[spFood_GetById]
	@Id int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [Id], [FoodName], [Description], [Price], [RestaurantId]
	FROM dbo.[Food]
	WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spFood_Insert]...';


GO
CREATE PROCEDURE [dbo].[spFood_Insert]
	@FoodName nvarchar(50),
	@Description nvarchar(50),
	@Price money,
	@RestaurantId int, 
	@Id int output
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO dbo.[Food](FoodName, [Description], Price, RestaurantId)
	VALUES(@FoodName, @Description, @Price, @RestaurantId)

	SET @Id = SCOPE_IDENTITY();
END
RETURN 0
GO
PRINT N'Creating [dbo].[spFood_Update]...';


GO
CREATE PROCEDURE [dbo].[spFood_Update]
	@FoodName nvarchar(50),
	@Description nvarchar(50),
	@Price money,
	@Id int 
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE dbo.[Food]
	SET FoodName = @FoodName, [Description] = @Description, Price = @Price
	WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spOrders_All]...';


GO
CREATE PROCEDURE [dbo].[spOrders_All]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [Id], [OrderName], [OrderDate], [FoodId], [Quantity], [Total]
	FROM dbo.[Order];
END
GO
PRINT N'Creating [dbo].[spOrders_Delete]...';


GO
CREATE PROCEDURE [dbo].[spOrders_Delete]
	@Id int
AS
BEGIN
	SET NOCOUNT ON;

	DELETE
	FROM dbo.[Order]
	WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spOrders_GetById]...';


GO
CREATE PROCEDURE [dbo].[spOrders_GetById]
	@Id int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [Id], [OrderName], [OrderDate], [FoodId], [Quantity], [Total]
	FROM dbo.[Order]
	WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spOrders_Insert]...';


GO
CREATE PROCEDURE [dbo].[spOrders_Insert]
	@OrderName nvarchar(50),
	@OrderDate datetime2(7),
	@FoodId int,
	@Quantity int,
	@Total money,
	@Id int output
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO dbo.[Order](OrderName, OrderDate, FoodId, Quantity, Total)
	VALUES (@OrderName, @OrderDate, @FoodId, @Quantity, @Total);

	SET @Id = SCOPE_IDENTITY();
END
GO
PRINT N'Creating [dbo].[spOrders_Update]...';


GO
CREATE PROCEDURE [dbo].[spOrders_Update]
	@OrderName nvarchar(50),
	@Quantity int,
	@FoodId int,
	@Total money,
	@Id int 
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE dbo.[Order]
	SET OrderName = @OrderName, Quantity = @Quantity, Total = @Total, FoodId = @FoodId
	WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spRestaurant_All]...';


GO
CREATE PROCEDURE [dbo].[spRestaurant_All]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [Id], [RestName], [City], [CategoryId], [RestDescription]
	FROM dbo.[Restaurant];
END
GO
PRINT N'Creating [dbo].[spRestaurant_Delete]...';


GO
CREATE PROCEDURE [dbo].[spRestaurant_Delete]
	@Id int
AS
BEGIN
	SET NOCOUNT ON;

	DELETE
	FROM dbo.[Restaurant]
	WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spRestaurant_GetById]...';


GO
CREATE PROCEDURE [dbo].[spRestaurant_GetById]
	@Id int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [Id], [RestName], [City], [CategoryId], [RestDescription]
	FROM dbo.[Restaurant]
	WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[SpRestaurant_Insert]...';


GO
CREATE PROCEDURE [dbo].[SpRestaurant_Insert]
	@RestName nvarchar(50),
	@City nvarchar(50),
	@CategoryId int,
	@RestDescription nvarchar(50),
	@Id int output
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO dbo.Restaurant(RestName, City, CategoryId, RestDescription)
	VALUES (@RestName, @City, @CategoryId, @RestDescription)

	SET @Id = SCOPE_IDENTITY();
END
GO
PRINT N'Creating [dbo].[spRestaurant_Update]...';


GO
CREATE PROCEDURE [dbo].[spRestaurant_Update]
	@RestName nvarchar(50),
	@RestDescription nvarchar(50),
	@City nvarchar(50),
	@Id int 
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE dbo.[Restaurant]
	SET RestName = @RestName, City = @City, RestDescription = @RestDescription
	WHERE Id = @Id
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cd7e3dd1-a13c-4cde-9396-fcb6fe0c473d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cd7e3dd1-a13c-4cde-9396-fcb6fe0c473d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '40b065a1-1628-4b21-9244-24a219075be4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('40b065a1-1628-4b21-9244-24a219075be4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b7eb83a1-9f36-40be-b146-8df2d6b4f149')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b7eb83a1-9f36-40be-b146-8df2d6b4f149')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

if not exists(select * from dbo.Category)
begin
    insert into dbo.Category(CategoryName)
    values('Serbian Food'),('Italian Food'),('Japanese Food'),('Turkish Food'),('Mexican Food'),('French Food'), ('American Food'), ('Chinese Food'), ('Drinks'), ('International Food'), ('Vegan Food');
end

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
