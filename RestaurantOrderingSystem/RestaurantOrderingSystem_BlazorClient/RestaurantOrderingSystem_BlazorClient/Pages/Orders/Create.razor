@page "/Orders/Create"
@inject HttpClient http
@inject NavigationManager navigationManager

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (foodItems is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="row">
        <div class="col-lg-6 col-md-6 mx-auto">
            <h3 class="text-center">Create Order</h3>
            <EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary Model="@order" />

                <div class="form-group">
                    <label for="name" class="control-label">Name</label>
                    <InputText @bind-Value="order.OrderName" id="name" class="form-control" />
                    <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="food" class="control-label">Meal</label>
                    <select @onchange="FoodItemChange" id="food" class="form-control" required>
                        <option value="" disabled="disabled">Select food</option>
                        @foreach (var f in foodItems)
                        {
                            <option value="@f.Id">@f.FoodName</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="qty" class="control-label">Quantity</label>
                    <InputNumber @bind-Value="order.Quantity" id="qty" class="form-control" />
                    <ValidationMessage For="@(() => order.Quantity)" class="text-danger" />
                </div>

                <div class="form-group">
                    <input type="submit" value="Create Order" class="btn btn-success" />
                    <a href="/Restaurants/List" class="btn btn-outline-success">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private OrderModel order = new OrderModel();
    private List<FoodModel> foodItems = new List<FoodModel>();
    private string errorString;

    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage response = await http.GetAsync("api/food");

        if (response.IsSuccessStatusCode)
        {
            foodItems = await response.Content.ReadFromJsonAsync<List<FoodModel>>();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
    }

    private async Task HandleValidSubmit()
    {
        order.Total = order.Quantity * foodItems.Where(x => x.Id == order.FoodId).First().Price;
        try
        {
            var response = await http.PostAsJsonAsync("api/orders", order);
            var contents = await response.Content.ReadFromJsonAsync<CreateOrderViewModel>();

            navigationManager.NavigateTo($"Orders/Display/{contents.Id}");
            //order = new OrderModel();
        }
        catch (Exception es)
        {
            errorString = es.Message;
        }
    }
}