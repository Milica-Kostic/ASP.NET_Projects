@page "/Restaurants/Create"
@inject HttpClient http
@inject NavigationManager navigationManager

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (categoryItems is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="row">
        <div class="col-lg-6 col-md-6 mx-auto">
            <h3 class="text-center">Add Restaurant</h3>
            <EditForm Model="@restaurant" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary Model="@restaurant" />

                <div class="form-group">
                    <label for="name" class="control-label">Name</label>
                    <InputText @bind-Value="restaurant.RestName" id="name" class="form-control" />
                    <ValidationMessage For="@(() => restaurant.RestName)" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="cty" class="control-label">Category</label>
                    <select @onchange="CategoryItemChange" id="cty" class="form-control" required>
                        <option value="" disabled="disabled">Select category</option>
                        @foreach (var f in categoryItems)
                        {
                            <option value="@f.Id">@f.CategoryName</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="city" class="control-label">City</label>
                    <InputText @bind-Value="restaurant.City" id="city" class="form-control" />
                    <ValidationMessage For="@(() => restaurant.City)" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="desc" class="control-label">Description</label>
                    <InputTextArea @bind-Value="restaurant.RestDescription" id="desc" class="form-control" />
                    <ValidationMessage For="@(() => restaurant.RestDescription)" class="text-danger" />
                </div>

                <div class="form-group">
                    <input type="submit" value="Add restaurant" class="btn btn-success" />
                    <a href="/Restaurants/List" class="btn btn-outline-success">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code 
{
    private RestaurantModel restaurant = new RestaurantModel();
    private List<CategoryModel> categoryItems = new List<CategoryModel>();
    private string errorString;

    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage response = await http.GetAsync("api/categories");

        if (response.IsSuccessStatusCode)
        {
            categoryItems = await response.Content.ReadFromJsonAsync<List<CategoryModel>>();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private void CategoryItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            restaurant.CategoryId = int.Parse(e.Value.ToString());
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await http.PostAsJsonAsync("api/restaurants", restaurant);
            var contents = await response.Content.ReadFromJsonAsync<CreateRestaurantViewModel>();

            navigationManager.NavigateTo($"Restaurants/Display/{contents.Id}");
            //restaurant = new RestaurantModel();
        }
        catch (Exception es)
        {
            errorString = es.Message;
        }
    }
}