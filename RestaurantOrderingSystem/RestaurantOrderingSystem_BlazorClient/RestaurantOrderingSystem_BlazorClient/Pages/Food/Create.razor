@page "/Food/Create"
@inject HttpClient http
@inject NavigationManager navigationManager

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (restItems is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="row">
        <div class="col-lg-6 col-md-6 mx-auto">
            <h3 class="text-center">Add Menu Item</h3>
            <EditForm Model="@food" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary Model="@food" />

                <div class="form-group">
                    <label for="name" class="control-label">Name</label>
                    <InputText @bind-Value="food.FoodName" id="name" class="form-control" />
                    <ValidationMessage For="@(() => food.FoodName)" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="rest" class="control-label">Restaurant</label>
                    <select @onchange="RestaurantItemChanged" id="rest" class="form-control" required>
                        <option value="" disabled="disabled">Select restaurant</option>
                        @foreach (var r in restItems)
                        {
                            <option value="@r.Id">@r.RestName</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="price" class="control-label">Price</label>
                    <InputNumber @bind-Value="food.Price" id="price" class="form-control" />
                    <ValidationMessage For="@(() => food.Price)" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="desc" class="control-label">Description</label>
                    <InputTextArea @bind-Value="food.FoodDescription" id="desc" class="form-control" />
                    <ValidationMessage For="@(() => food.FoodDescription)" class="text-danger" />
                </div>

                <div class="form-group">
                    <input type="submit" value="Add to menu" class="btn btn-success" />
                    <a href="/Food/List" class="btn btn-outline-success">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private FoodModel food = new FoodModel();
    private List<RestaurantModel> restItems = new List<RestaurantModel>();
    private string errorString;

    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage response = await http.GetAsync("api/restaurants");

        if (response.IsSuccessStatusCode)
        {
            restItems = await response.Content.ReadFromJsonAsync<List<RestaurantModel>>();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private void RestaurantItemChanged(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            food.RestaurantId = int.Parse(e.Value.ToString());
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await http.PostAsJsonAsync("api/food", food);
            var contents = await response.Content.ReadFromJsonAsync<CreateFoodViewModel>();

            navigationManager.NavigateTo($"food/display/{contents.Id}");
            //food = new FoodModel();
        }
        catch (Exception es)
        {
            errorString = es.Message;
        }
    }
}