@page "/Orders/Create"
@inject IHttpClientFactory _clientFactory
@inject NavigationManager navigationManager

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (foodList is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="row">
        <div class="col-lg-6 col-md-6 mx-auto">
            <h3 class="text-center">Create Order</h3>
            <EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary Model="@order" />

                <div class="form-group">
                    <label for="name" class="control-label">Name</label>
                    <InputText @bind-Value="order.OrderName" id="name" class="form-control" />
                    <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="meal" class="control-label">Meal</label>
                    <select @onchange="FoodItemChange" id="meal" class="form-control" required>
                        <option value="" disabled="disabled">Select food</option>
                        @foreach (var f in foodList)
                        {
                            <option value="@f.Id">@f.FoodName</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="qty" class="control-label">Quantity</label>
                    <InputNumber @bind-Value="order.Quantity" id="qty" class="form-control" />
                    <ValidationMessage For="@(() => order.Quantity)" class="text-danger" />
                </div>

                <div class="form-group">
                    <input type="submit" value="Create Order" class="btn btn-success" />
                    <a href="/Restaurants/List" class="btn btn-outline-success">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code 
{
    private OrderModel order = new OrderModel();
    private List<FoodModel> foodList = new List<FoodModel>();
    private string errorString;

    protected override async Task OnInitializedAsync()
    {
        var client = _clientFactory.CreateClient("API");

        try
        {
            foodList = await client.GetFromJsonAsync<List<FoodModel>>("api/food");

        }
        catch (Exception ex)
        {

            errorString = ex.Message;
        }

    }

    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
        else
        {
            order.FoodId = 0;
        }
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            var client = _clientFactory.CreateClient("API");

            var response = await client.PostAsJsonAsync("api/orders", order);
            var contents = await response.Content.ReadFromJsonAsync<CreateOrderViewModel>();
            navigationManager.NavigateTo($"orders/display/{contents.Id}");
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }
    }
}